name: Publish App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

env:
  GODOT_VERSION: "4.5.1"
  PROJECT_DIR: "."
  WINDOWS_PRESET: "Windows Desktop"
  MACOS_PRESET: "macOS"
  LINUX_PRESET: "Linux"
  EXPORT_ROOT: "build"

jobs:
  build:
    runs-on: ubuntu-latest

    container:
      image: barichello/godot-ci:mono-4.5.1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        uses: kzrnm/get-net-sdk-project-versions-action@v1
        id: get-version
        with:
          proj-path: PokeDesktop.csproj

      - name: Prepare MONO template
        shell: bash
        env:
          GODOT_VERSION: ${{ env.GODOT_VERSION }}
        run: |
          set -eux
          mkdir -p ~/.local/share/godot/export_templates
          mv /root/.local/share/godot/templates/${GODOT_VERSION}.stable.mono ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono || true
          mv /root/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono ~/.local/share/godot/export_templates/${GODOT_VERSION}.stable.mono || true

      - name: Display godot version
        run: godot --version

      - name: Clean and create build folder
        run: |
          rm -rf "${EXPORT_ROOT}"
          mkdir -p "${EXPORT_ROOT}/windows" "${EXPORT_ROOT}/macos" "${EXPORT_ROOT}/linux"
          
      - name: Check .NET SDK
        run: dotnet --info || true
        
      #- name: Install .NET 9 SDK (in container)
      #  run: |
      #    set -eux
      #    apt-get update
      #    apt-get install -y wget apt-transport-https gnupg
      #    wget https://packages.microsoft.com/config/debian/12/packages-microsoft-prod.deb
      #    dpkg -i packages-microsoft-prod.deb
      #    apt-get update
      #    apt-get install -y dotnet-sdk-9.0
      #    dotnet --info

      # --- Exports ---
      - name: Export Windows (release)
        run: |
          godot --headless --verbose --path "${PROJECT_DIR}" \
            --export-release "${WINDOWS_PRESET}" \
            "${EXPORT_ROOT}/windows/PokéDesktop.exe"

      # Décommente si tu veux aussi macOS :
      # - name: Export macOS (release)
      #   run: |
      #     godot --headless --verbose --path "${PROJECT_DIR}" \
      #       --export-release "${MACOS_PRESET}" \
      #       "${EXPORT_ROOT}/macos/PokéDesktop.zip"

      - name: Export Linux (release)
        run: |
          godot --headless --verbose --path "${PROJECT_DIR}" \
            --export-release "${LINUX_PRESET}" \
            "${EXPORT_ROOT}/linux/PokéDesktop.x86_64"
            
      # --- Lister pour vérifier la présence du dossier data_* ---
      - name: List export outputs
        run: |
          echo "Windows:"
          ls -laR "${EXPORT_ROOT}/windows" || true
          echo "macOS:"
          ls -laR "${EXPORT_ROOT}/macos" || true
          echo "Linux:"
          ls -laR "${EXPORT_ROOT}/linux" || true
          
      - name: Create ZIP archives
        run: |
          cd "${EXPORT_ROOT}"

          # Windows
          zip -r "PokéDesktop-windows.zip" "windows"

          # macOS
          # zip -r "PokéDesktop-macos.zip" "macos"

          # Linux
          zip -r "PokéDesktop-linux.zip" "linux"

      # --- Upload des artifacts de build (CI) ---
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: PokéDesktop
          path: ${{ env.EXPORT_ROOT }}/PokéDesktop-windows.zip

      # - name: Upload macOS artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: PokéDesktop-macos
      #     path: ${{ env.EXPORT_ROOT }}/PokéDesktop-macos.zip

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: PokéDesktop-linux
          path: ${{ env.EXPORT_ROOT }}/PokéDesktop-linux.zip

      # --- Create & Publish Release + Upload assets ---
      - name: Create GitHub Release and upload assets
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{steps.get-version.outputs.version-prefix}}
          name: ${{steps.get-version.outputs.version-prefix}}
          draft: false
          prerelease: false
          files: |
            ${{ env.EXPORT_ROOT }}/*